// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/main.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protocol/main.proto", fileDescriptor_9e8e7d5cf664e777) }

var fileDescriptor_9e8e7d5cf664e777 = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x0b, 0x82, 0xc8, 0x61, 0x4c, 0x97, 0x21, 0x42, 0x95, 0x81, 0xf5, 0xbe, 0x82, 0x3e,
	0x80, 0xa8, 0xbb, 0x1c, 0x4c, 0x36, 0x84, 0xdd, 0x66, 0xe5, 0xe0, 0x82, 0x69, 0x53, 0x92, 0xd3,
	0x5e, 0xf8, 0xd6, 0xbe, 0x81, 0x90, 0xa4, 0x26, 0xa1, 0xba, 0xcb, 0xfc, 0xdf, 0xff, 0x7f, 0x9c,
	0xc0, 0xbc, 0xd5, 0x8a, 0x54, 0xa5, 0xe4, 0x7d, 0xcd, 0x45, 0x53, 0xda, 0x17, 0x3b, 0x1b, 0xc2,
	0xfc, 0xf2, 0x17, 0xef, 0xbb, 0xea, 0x13, 0xc9, 0x15, 0xf2, 0xb0, 0xe2, 0x1d, 0x1d, 0x5c, 0xf8,
	0xf0, 0x7d, 0x02, 0x93, 0x2d, 0x29, 0x8d, 0x5b, 0xd4, 0xbd, 0xa8, 0x90, 0xad, 0x61, 0xba, 0x12,
	0x86, 0x9e, 0xa5, 0x7c, 0xb1, 0x63, 0xc3, 0x16, 0xe5, 0x30, 0x2c, 0x53, 0xf2, 0xc6, 0x35, 0xaf,
	0x4d, 0x7e, 0xfd, 0x1f, 0xdf, 0xa0, 0x29, 0x32, 0xb6, 0x84, 0xe9, 0x06, 0x49, 0x0b, 0xec, 0xd1,
	0xe5, 0xb1, 0x30, 0x25, 0x5e, 0x78, 0x11, 0xb8, 0xcb, 0x8b, 0x8c, 0xed, 0x60, 0x96, 0x76, 0x57,
	0xea, 0x83, 0xdd, 0xa6, 0x22, 0x14, 0x11, 0xf4, 0xae, 0xc5, 0x91, 0x8a, 0xbb, 0xef, 0x09, 0x26,
	0x4b, 0x94, 0x48, 0xc3, 0x75, 0x37, 0x61, 0x11, 0xe7, 0xde, 0x77, 0x1e, 0xe8, 0xba, 0x75, 0x82,
	0x1d, 0xcc, 0xec, 0xbf, 0x3b, 0x3a, 0x28, 0x2d, 0xbe, 0x38, 0x09, 0xd5, 0xc4, 0xa7, 0x8d, 0xe0,
	0xf8, 0xb4, 0x51, 0xc5, 0x99, 0xdf, 0x61, 0xfe, 0xaa, 0x91, 0x13, 0xa6, 0xee, 0xbb, 0x30, 0xfc,
	0x03, 0x7b, 0xfb, 0x55, 0x28, 0x25, 0xb8, 0xc8, 0xf6, 0xa7, 0x96, 0x3c, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x9e, 0x53, 0x68, 0x4e, 0x47, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StoreServiceClient is the client API for StoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StoreServiceClient interface {
	// Bucket
	ListAllBuckets(ctx context.Context, in *ListAllBucketsParams, opts ...grpc.CallOption) (*ListAllBucketsRes, error)
	RetrieveBucket(ctx context.Context, in *RetrieveBucketParams, opts ...grpc.CallOption) (*Bucket, error)
	RetrieveBucketLog(ctx context.Context, in *RetreiveBucketLogParams, opts ...grpc.CallOption) (*RetreiveBucketLogRes, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketParams, opts ...grpc.CallOption) (*OpRes, error)
	// Auth
	ListAuthorization(ctx context.Context, in *ListAuthorizationParams, opts ...grpc.CallOption) (*ListAuthorizationRes, error)
	CreateAuthorization(ctx context.Context, in *CreateAuthorizationParams, opts ...grpc.CallOption) (*Authorization, error)
}

type storeServiceClient struct {
	cc *grpc.ClientConn
}

func NewStoreServiceClient(cc *grpc.ClientConn) StoreServiceClient {
	return &storeServiceClient{cc}
}

func (c *storeServiceClient) ListAllBuckets(ctx context.Context, in *ListAllBucketsParams, opts ...grpc.CallOption) (*ListAllBucketsRes, error) {
	out := new(ListAllBucketsRes)
	err := c.cc.Invoke(ctx, "/protocol.StoreService/ListAllBuckets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RetrieveBucket(ctx context.Context, in *RetrieveBucketParams, opts ...grpc.CallOption) (*Bucket, error) {
	out := new(Bucket)
	err := c.cc.Invoke(ctx, "/protocol.StoreService/RetrieveBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) RetrieveBucketLog(ctx context.Context, in *RetreiveBucketLogParams, opts ...grpc.CallOption) (*RetreiveBucketLogRes, error) {
	out := new(RetreiveBucketLogRes)
	err := c.cc.Invoke(ctx, "/protocol.StoreService/RetrieveBucketLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) DeleteBucket(ctx context.Context, in *DeleteBucketParams, opts ...grpc.CallOption) (*OpRes, error) {
	out := new(OpRes)
	err := c.cc.Invoke(ctx, "/protocol.StoreService/DeleteBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) ListAuthorization(ctx context.Context, in *ListAuthorizationParams, opts ...grpc.CallOption) (*ListAuthorizationRes, error) {
	out := new(ListAuthorizationRes)
	err := c.cc.Invoke(ctx, "/protocol.StoreService/ListAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeServiceClient) CreateAuthorization(ctx context.Context, in *CreateAuthorizationParams, opts ...grpc.CallOption) (*Authorization, error) {
	out := new(Authorization)
	err := c.cc.Invoke(ctx, "/protocol.StoreService/CreateAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServiceServer is the server API for StoreService service.
type StoreServiceServer interface {
	// Bucket
	ListAllBuckets(context.Context, *ListAllBucketsParams) (*ListAllBucketsRes, error)
	RetrieveBucket(context.Context, *RetrieveBucketParams) (*Bucket, error)
	RetrieveBucketLog(context.Context, *RetreiveBucketLogParams) (*RetreiveBucketLogRes, error)
	DeleteBucket(context.Context, *DeleteBucketParams) (*OpRes, error)
	// Auth
	ListAuthorization(context.Context, *ListAuthorizationParams) (*ListAuthorizationRes, error)
	CreateAuthorization(context.Context, *CreateAuthorizationParams) (*Authorization, error)
}

// UnimplementedStoreServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStoreServiceServer struct {
}

func (*UnimplementedStoreServiceServer) ListAllBuckets(ctx context.Context, req *ListAllBucketsParams) (*ListAllBucketsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllBuckets not implemented")
}
func (*UnimplementedStoreServiceServer) RetrieveBucket(ctx context.Context, req *RetrieveBucketParams) (*Bucket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBucket not implemented")
}
func (*UnimplementedStoreServiceServer) RetrieveBucketLog(ctx context.Context, req *RetreiveBucketLogParams) (*RetreiveBucketLogRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBucketLog not implemented")
}
func (*UnimplementedStoreServiceServer) DeleteBucket(ctx context.Context, req *DeleteBucketParams) (*OpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (*UnimplementedStoreServiceServer) ListAuthorization(ctx context.Context, req *ListAuthorizationParams) (*ListAuthorizationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthorization not implemented")
}
func (*UnimplementedStoreServiceServer) CreateAuthorization(ctx context.Context, req *CreateAuthorizationParams) (*Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthorization not implemented")
}

func RegisterStoreServiceServer(s *grpc.Server, srv StoreServiceServer) {
	s.RegisterService(&_StoreService_serviceDesc, srv)
}

func _StoreService_ListAllBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllBucketsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ListAllBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.StoreService/ListAllBuckets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ListAllBuckets(ctx, req.(*ListAllBucketsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RetrieveBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBucketParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RetrieveBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.StoreService/RetrieveBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RetrieveBucket(ctx, req.(*RetrieveBucketParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_RetrieveBucketLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetreiveBucketLogParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).RetrieveBucketLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.StoreService/RetrieveBucketLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).RetrieveBucketLog(ctx, req.(*RetreiveBucketLogParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.StoreService/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).DeleteBucket(ctx, req.(*DeleteBucketParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_ListAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthorizationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).ListAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.StoreService/ListAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).ListAuthorization(ctx, req.(*ListAuthorizationParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreService_CreateAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorizationParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServiceServer).CreateAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.StoreService/CreateAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServiceServer).CreateAuthorization(ctx, req.(*CreateAuthorizationParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _StoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.StoreService",
	HandlerType: (*StoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllBuckets",
			Handler:    _StoreService_ListAllBuckets_Handler,
		},
		{
			MethodName: "RetrieveBucket",
			Handler:    _StoreService_RetrieveBucket_Handler,
		},
		{
			MethodName: "RetrieveBucketLog",
			Handler:    _StoreService_RetrieveBucketLog_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _StoreService_DeleteBucket_Handler,
		},
		{
			MethodName: "ListAuthorization",
			Handler:    _StoreService_ListAuthorization_Handler,
		},
		{
			MethodName: "CreateAuthorization",
			Handler:    _StoreService_CreateAuthorization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/main.proto",
}
